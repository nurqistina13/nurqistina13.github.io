# Define the row slices
row_slices <- list(
c(2, 79),
c(80, 181),
c(182, 290),
c(291, 397),
c(398, 503),
c(504, 624),
c(625, 749),
c(750, 888),
c(889, 1020)  # Adjusted the end index to match the number of rows in the dataset
)  # Add more slices as needed
# Loop through each row slice range
for (i in seq_along(row_slices)) {
# Calculate the mean of 'employment_rate_overall' for the current slice
mean_value <- mean(survey[row_slices[[i]][1]:row_slices[[i]][2], "employment_rate_overall"], na.rm = TRUE)
# Assign the mean value to the corresponding indices in the vector
mean_employment_rate_per_year[row_slices[[i]][1]:row_slices[[i]][2]] <- mean_value
}
# Create a new column in the dataset to store the mean values
survey$mean_employment_rate_per_year <- mean_employment_rate_per_year
glimpse(survey)
slice(survey,82:100)
slice(survey,200:230)
shiny::runApp('graphs')
runApp('graphs')
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
runApp('graphs')
mean_employment_rate_per_year<-data.frame()
mean_employment_rate_per_year<-data.frame(
Mean_Employment_Rate_Per_Year = c(90.1, 91.3, 89.5, 92.0, 88.7),
Year = c(2013, 2014, 2015, 2016, 2017,2018,2019,2020,2021)
)
glimpse(survey,2:4)
slice(survey,2:4)
slice(survey,85:86)
slice(survey,190:191)
slice(survey,320:321)
slice(survey,400:401)
slice(survey,520:521)
slice(survey,640:641)
slice(survey,750:752)
slice(survey,900:902)
Mean_Employment_Rate_Per_Year <- data.frame(
Mean_Employment_Rate = c(90.1359, 90.66569, 90.87339, 90.22243, 90.88585, 91.06364, 91.0872, 94.08273, 94.48106),
Year = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021)
)
glimpse(Mean_Employment_Rate_Per_Year)
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
mean_employment_rate_by_year <- data.frame(
+     mean_employment_rate = c(90.1359, 90.66569, 90.87339, 90.22243, 90.88585, 91.06364, 91.0872, 94.08273, 94.48106),
mean_employment_rate_by_year <- data.frame(
mean_employment_rate = c(90.1359, 90.66569, 90.87339, 90.22243, 90.88585, 91.06364, 91.0872, 94.08273, 94.48106),
year = c(2013, 2014, 2015, 2016, 2017, 2018,2019,2020,2021)  # Add years for each value
)
# View the created data frame
print(mean_employment_rate_by_year)
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
install.packages("plotly")
runApp('graphs')
runApp('graphs')
runApp('graphs')
runApp('graphs')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graphs/app.R")
runApp('graphs')
runApp('personal_app')
runApp('personal_app')
library(shiny); runApp('personal_app/app 1.R')
runApp('graph_2')
runApp('personal_app/app 1.R')
runApp('personal_app')
data <- read.csv("/Users/student/Desktop/y3s2/nm2207/github/nurqistina13.github.io/GraduateEmploymentSurveyNTUNUSSITSMUSUSSSUTD.csv")
# Load the required library
library(dplyr)
# Define the ranges of rows for each year
year_ranges <- list(c(2, 79), c(80, 181), c(182, 290), c(291, 397), c(398, 503),
c(504, 624), c(625, 749), c(750, 888), c(889, 1021))
# Initialize an empty data frame to store the results
average_of_gross_monthly_income_by_year <- data.frame(year = 2013:2021,
average_of_gross_monthly_income = numeric(length(year_ranges)))
# Loop through each year range
for (i in seq_along(year_ranges)) {
# Extract the rows for the current year range and calculate the average gross monthly income
average <- data %>%
slice(year_ranges[[i]][1]:year_ranges[[i]][2]) %>%
summarise(average_of_gross_monthly_income = mean(gross_monthly_mean, na.rm = TRUE))
# Store the average in the result data frame
average_of_gross_monthly_income_by_year[i, "average_of_gross_monthly_income"] <- average$average_of_gross_monthly_income
}
# Print the result data frame
print(average_of_gross_monthly_income_by_year)
# Load the required library
library(dplyr)
# Define the ranges of rows for each year
year_ranges <- list(c(2, 79), c(80, 181), c(182, 290), c(291, 397), c(398, 503),
c(504, 624), c(625, 749), c(750, 888), c(889, 1021))
# Initialize an empty data frame to store the results
average_of_gross_monthly_income_by_year <- data.frame(year = 2013:2021,
average_of_gross_monthly_income = numeric(length(year_ranges)))
# Loop through each year range
for (i in seq_along(year_ranges)) {
# Extract the rows for the current year range and calculate the average gross monthly income
average <- data %>%
slice(year_ranges[[i]][1]:year_ranges[[i]][2]) %>%
summarise(average_of_gross_monthly_income = mean(gross_monthly_mean, na.rm = TRUE))
# Store the average in the result data frame
average_of_gross_monthly_income_by_year[i, "average_of_gross_monthly_income"] <- average$average_of_gross_monthly_income
}
# Print the result data frame
print(average_of_gross_monthly_income_by_year)
# Define the file path where you want to save the new dataframe
file_path <- "/Users/student/Desktop/average_of_gross_monthly_income_by_year.csv"
# Save the dataframe as a CSV file
write.csv(average_of_gross_monthly_income_by_year, file = file_path, row.names = FALSE)
# Print a message indicating that the file has been saved
cat("The new dataframe has been saved to", file_path, "\n")
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_3/app.R")
# Read the saved CSV file back into R (if you haven't already done so)
average_of_gross_monthly_income_by_year <- read.csv("/Users/student/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_3/average_of_gross_monthly_income_by_year.csv")
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_3/app.R")
# Create the line graph
ggplot(average_of_gross_monthly_income_by_year, aes(x = year, y = average_of_gross_monthly_income)) +
geom_line() +
geom_point() +
labs(title = "Average Gross Monthly Income by Year",
x = "Year",
y = "Average Gross Monthly Income") +
theme_minimal()
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_3/app.R")
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_3/app.R")
runApp('graph_3')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_3/app.R")
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_3/app.R")
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_3/app.R")
runApp('graph_3')
runApp('graph_2')
runApp('personal_app')
runApp('personal_app')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_3/app.R")
runApp('graph_3')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_3/app.R")
runApp('graph_3')
rsconnect::setAccountInfo(name='nurqistina13', token='0A45DE34082848054105666CF94DCAF3', secret='T3CL78H0jCwK21iJTMoNy3V+dpZoWMAzKdCMIi/B')
runApp('graph_3')
runApp('graph_3')
dataset1 <- read.csv("/Users/student/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/average_of_gross_monthly_income_by_year copy.csv")
dataset2<-read.csv("/Users/student/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/mean_employment_2021 copy.csv")
glimpse(dataset1)
glimpse(dataset2)
combined_data <- cbind(dataset1, dataset2)
data<-read.csv("/Users/student/Desktop/y3s2/nm2207/github/nurqistina13.github.io/GraduateEmploymentSurveyNTUNUSSITSMUSUSSSUTD.csv")
glimpse(data)
# Load the required library
library(dplyr)
# Define the ranges of rows for each year
year_ranges <- list(c(2, 79), c(80, 181), c(182, 290), c(291, 397), c(398, 503),
c(504, 624), c(625, 749), c(750, 888), c(889, 1021))
# Initialize an empty data frame to store the results
average_employment_rate_by_year <- data.frame(year = 2013:2021,
average_employment_rate = numeric(length(year_ranges)))
# Loop through each year range
for (i in seq_along(year_ranges)) {
# Extract the rows for the current year range and calculate the average employment rate
average <- data %>%
slice(year_ranges[[i]][1]:year_ranges[[i]][2]) %>%
summarise(average_employment_rate = mean(employment_rate_overall, na.rm = TRUE))
# Store the average in the result data frame
average_employment_rate_by_year[i, "average_employment_rate"] <- average$average_employment_rate
}
# Print the result data frame
print(average_employment_rate_by_year)
# Define the file path where you want to save the new dataset
file_path <- "/Users/student/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4"
# Save the dataset as a CSV file
write.csv(average_employment_rate_by_year, file = file_path, row.names = FALSE)
# Remove the new dataset from R
rm(average_employment_rate_by_year)
# Print a message indicating that the dataset has been deleted
print("The dataset 'average_employment_rate_by_year' has been deleted from R.")
avgincomebyyear<-read.csv("/Users/student/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/average_of_gross_monthly_income_by_year copy.csv")
glimpse(avgincomebyyear)
avgemploymentbyyear<-read.csv("/Users/student/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/df_1 copy.csv")
glimpse(avgemploymentbyyear)
combined_data <- cbind(avgemploymentbyyear, avgincomebyyear)
glimpse(combined_data)
combined_data <- combined_data[, -3]
glimpse(combined_data)
combined_data <- combined_data[, c(2, 1, 3:ncol(combined_data))]
print(combined_data)
# Load the required library
library(dplyr)
# Define the ranges of rows for each university
university_ranges <- list(c(889, 927), c(928, 964), c(965, 997), c(998, 1009), c(1010, 1021))
# Initialize an empty data frame to store the results
average_gross_monthly_income_in_2021 <- data.frame(university = c("NTU", "NUS", "SIT", "SMU", "SUSS"),
average_gross_monthly_income = numeric(length(university_ranges)))
# Loop through each university range
for (i in seq_along(university_ranges)) {
# Extract the rows for the current university range and calculate the average gross monthly income
average <- data %>%
slice(university_ranges[[i]][1]:university_ranges[[i]][2]) %>%
summarise(average_gross_monthly_income = mean(gross_monthly_mean, na.rm = TRUE))
# Store the average in the result data frame
average_gross_monthly_income_in_2021[i, "average_gross_monthly_income"] <- average$average_gross_monthly_income
}
# Print the result data frame
print(average_gross_monthly_income_in_2021)
# Load the required library
library(dplyr)
# Define the ranges of rows for each university
university_ranges <- list(c(889, 927), c(928, 964), c(965, 997), c(998, 1009), c(1010, 1021))
# Initialize an empty data frame to store the results
average_gross_monthly_income_in_2021 <- data.frame(university = c("NTU", "NUS", "SIT", "SMU", "SUSS"),
average_gross_monthly_income_in_2021 = numeric(length(university_ranges)))
# Loop through each university range
for (i in seq_along(university_ranges)) {
# Extract the rows for the current university range and calculate the average gross monthly income
average <- data %>%
slice(university_ranges[[i]][1]:university_ranges[[i]][2]) %>%
summarise(average_gross_monthly_income_in_2021 = mean(gross_monthly_mean, na.rm = TRUE))
# Store the average in the result data frame
average_gross_monthly_income_in_2021[i, "average_gross_monthly_income_in_2021"] <- average$average_gross_monthly_income_in_2021
}
# Print the result data frame
print(average_gross_monthly_income_in_2021)
# Define the file path where you want to save the new dataset
file_path <- "/Users/student/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4"
# Save the dataset as a CSV file
write.csv(average_gross_monthly_income_in_2021, file = file_path, row.names = FALSE)
# Define the file path including the filename where you want to save the new dataset
file_path <- "/Users/student/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/average_gross_monthly_income_in_2021.csv"
# Save the dataset as a CSV file
write.csv(average_gross_monthly_income_in_2021, file = file_path, row.names = FALSE)
# Print a message indicating that the file has been saved
cat("The new dataset has been saved to", file_path, "\n")
employment2021<-read.csv("/Users/student/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/mean_employment_2021 copy.csv")
income2021<-read.csv("/Users/student/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/average_gross_monthly_income_in_2021.csv")
glimpse(employment2021)
glimpse(income2021)
# Load the dplyr package
library(dplyr)
# Remove the column "X" from the dataset employment2021
employment2021 <- select(employment2021, -X)
glimpse(employment2021)
combined_dataset <- cbind(income2021, employment2021)
glimpse(combined_dataset)
# Remove the third column from the combined dataset
combined_dataset <- combined_dataset[, -3]
glimpse(combined_dataset)
# Create a new dataset by selecting rows 889 to 1021 and columns employment_rate_overall and university
new_dataset <- data[889:1021, c("employment_rate_overall", "university")]
glimpse(new_dataset)
# Create a new dataset by selecting rows 889 to 1021 and columns gross_monthly_mean and university
new_dataset2 <- data[889:1021, c("gross_monthly_mean", "university")]
# Load the dplyr package
library(dplyr)
# Create a new dataset by selecting rows 889 to 1021 and columns gross_monthly_mean and university
new_dataset2 <- select(data[889:1021, ], gross_monthly_mean, university)
glimpse(new_dataset2)
# Combine datasets by columns
combined_dataset <- cbind(new_dataset, new_dataset2)
glimpse(combined_dataset)
# Load the dplyr package
library(dplyr)
# Move column 4 to become column 1 and then delete column 3
combined_dataset <- combined_dataset %>%
select(4, everything()) %>%  # Move column 4 to become column 1
select(-3)  # Delete column 3
# Move column 4 to become column 1
combined_dataset <- combined_dataset[, c(4, 1:3, 5:ncol(combined_dataset))]
# Load the dplyr package
library(dplyr)
# Move column 4 to become column 1
combined_dataset <- combined_dataset %>%
select(4, everything())
# Load the dplyr package
library(dplyr)
# Delete column 4
combined_dataset <- combined_dataset %>%
select(-4)
glimpse(combined_dataset)
# Move column 2 to become column 1
combined_dataset <- combined_dataset[, c(2, 1, 3:ncol(combined_dataset))]
glimse(combined_dataset)
glimpse(combined_dataset)
# Load the required libraries
library(shiny)
library(plotly)
# Define UI
ui <- fluidPage(
titlePanel("Interactive Scatter Plot of Employment Rate vs Gross Monthly Mean by University"),
sidebarLayout(
sidebarPanel(
# Empty sidebar for this example
),
mainPanel(
plotlyOutput("scatter_plot")
)
)
)
# Define server logic
server <- function(input, output) {
# Create the interactive scatter plot
output$scatter_plot <- renderPlotly({
ggplotly(
ggplot(combined_dataset, aes(x = employment_rate_overall, y = gross_monthly_mean)) +
geom_point() +
facet_wrap(~ university) +
labs(x = "Employment Rate Overall", y = "Gross Monthly Mean") +
theme_minimal()
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load the required libraries
library(shiny)
library(plotly)
# Load the required libraries
library(shiny)
library(plotly)
# Define UI
ui <- fluidPage(
titlePanel("Interactive Scatter Plot of Employment Rate vs Gross Monthly Mean by University"),
sidebarLayout(
sidebarPanel(
textInput("text_input", "Enter something here:")
),
mainPanel(
plotlyOutput("scatter_plot")
)
)
)
# Define server logic
server <- function(input, output) {
# Create the interactive scatter plot
output$scatter_plot <- renderPlotly({
ggplotly(
ggplot(combined_dataset, aes(x = employment_rate_overall, y = gross_monthly_mean)) +
geom_point() +
facet_wrap(~ university) +
labs(x = "Employment Rate Overall", y = "Gross Monthly Mean") +
theme_minimal() +
theme(strip.text = element_text(margin = margin(20, 0, 20, 0))) # Adjust the margin as needed
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic
server <- function(input, output) {
# Remove NA values from the dataset
combined_dataset_clean <- na.omit(combined_dataset)
# Create the interactive scatter plot
output$scatter_plot <- renderPlotly({
ggplotly(
ggplot(combined_dataset_clean, aes(x = employment_rate_overall, y = gross_monthly_mean)) +
geom_point() +
facet_wrap(~ university) +
labs(x = "Employment Rate Overall", y = "Gross Monthly Mean") +
theme_minimal() +
theme(strip.text = element_text(margin = margin(20, 0, 20, 0))) # Adjust the margin as needed
)
})
}
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
# Run the application
shinyApp(ui = ui, server = server)
runApp('graph_4')
runApp('graph_4')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
runApp('graph_4')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
runApp('graph_4')
runApp('graph_4')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
# Define server logic
server <- function(input, output) {
# Remove NA values from the dataset
combined_dataset_clean <- combined_dataset[complete.cases(combined_dataset), ]
# Create the interactive scatter plot with customized facet titles
output$scatter_plot <- renderPlotly({
ggplotly(
ggplot(combined_dataset_clean, aes(x = employment_rate_overall, y = gross_monthly_mean)) +
geom_point() +
facet_wrap(~ university, labeller = labeller(university = c("NTU" = "Nanyang Technological University",
"NUS" = "National University of Singapore",
"SIT" = "Singapore Institute of Technology",
"SMU" = "Singapore Management University",
"SUSS" = "Singapore University of Social Sciences")), scales = "free") +
labs(x = "Employment Rate Overall", y = "Gross Monthly Mean") +
theme_minimal() +
theme(strip.text = element_text(margin = margin(20, 0, 20, 0))) # Adjust the margin as needed
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic
server <- function(input, output) {
# Remove rows with NA values from the dataset
combined_dataset_clean <- combined_dataset[!is.na(combined_dataset$university), ]
# Create the interactive scatter plot with customized facet titles
output$scatter_plot <- renderPlotly({
ggplotly(
ggplot(combined_dataset_clean, aes(x = employment_rate_overall, y = gross_monthly_mean)) +
geom_point() +
facet_wrap(~ university, labeller = labeller(university = c("NTU" = "Nanyang Technological University",
"NUS" = "National University of Singapore",
"SIT" = "Singapore Institute of Technology",
"SMU" = "Singapore Management University",
"SUSS" = "Singapore University of Social Sciences"))) +
labs(x = "Employment Rate Overall", y = "Gross Monthly Mean") +
theme_minimal() +
theme(strip.text = element_text(margin = margin(20, 0, 20, 0))) # Adjust the margin as needed
)
})
}
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
runApp('graph_4')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
runApp('graph_4')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
runApp('graph_4')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
# Define server logic
server <- function(input, output) {
# Filter out rows with NA values in the 'university' column
combined_dataset_filtered <- combined_dataset[!is.na(combined_dataset$university), ]
# Create the interactive scatter plot
output$scatter_plot <- renderPlotly({
ggplotly(
ggplot(combined_dataset_filtered, aes(x = employment_rate_overall, y = gross_monthly_mean)) +
geom_point() +
facet_wrap(~ university) +
labs(x = "Employment Rate Overall", y = "Gross Monthly Mean") +
theme_minimal() +
theme(strip.text = element_text(margin = margin(20, 0, 20, 0))) # Adjust the margin as needed
)
})
}
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
# Run the application
shinyApp(ui = ui, server = server)
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
runApp('graph_4')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
runApp('graph_4')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
runApp('graph_4')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
runApp('graph_4')
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
runApp('graph_4')
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic
server <- function(input, output) {
# Create the interactive scatter plot with customized facet titles
output$scatter_plot <- renderPlotly({
ggplotly(
ggplot(combined_dataset, aes(x = employment_rate_overall, y = gross_monthly_mean)) +
geom_point() +
facet_wrap(~ university, labeller = labeller(university = c("NTU" = "Nanyang Technological University",
"NUS" = "National University of Singapore",
"SIT" = "Singapore Institute of Technology",
"SMU" = "Singapore Management University",
"SUSS" = "Singapore University of Social Sciences"))) +
labs(x = "Employment Rate Overall", y = "Gross Monthly Mean") +
theme_minimal() +
theme(strip.text = element_text(margin = margin(20, 0, 20, 0))) # Adjust the margin as needed
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
View(combined_dataset)
View(combined_dataset)
View(income2021)
View(employment2021)
source("~/Desktop/y3s2/nm2207/github/nurqistina13.github.io/graph_4/app.R")
